## Copyright 2013 MS OpenTech.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##      http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
package ${package};

import com.msopentech.odatajclient.proxy.api.annotations.EntityType;
import com.msopentech.odatajclient.proxy.api.annotations.Key;
import com.msopentech.odatajclient.proxy.api.annotations.KeyRef;
import com.msopentech.odatajclient.proxy.api.annotations.NavigationProperty;
import com.msopentech.odatajclient.proxy.api.annotations.Property;
import com.msopentech.odatajclient.proxy.api.impl.AbstractType;
import com.msopentech.odatajclient.engine.data.metadata.EdmContentKind;
import com.msopentech.odatajclient.engine.data.metadata.edm.ConcurrencyMode;
import com.msopentech.odatajclient.engine.data.metadata.edm.Action;
#foreach($ns in $namespaces)
import ${basePackage}.${ns}.*;
import ${basePackage}.${ns}.types.*;
#end

// EdmSimpleType property imports
import com.msopentech.odatajclient.engine.data.ODataDuration;
import com.msopentech.odatajclient.engine.data.ODataTimestamp;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.Geospatial;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.GeospatialCollection;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.LineString;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.MultiLineString;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.MultiPoint;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.MultiPolygon;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.Point;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.Polygon;
import java.math.BigDecimal;
import java.net.URI;
import java.util.UUID;
import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;
import java.io.Serializable;
import java.util.Collection;

#set( $fcprops = $utility.getFcProperties($entityType))
#if ( $keyRef )@KeyRef(${keyRef}.class)#end

@EntityType(name = "$entityType.Name",
        openType = $entityType.isOpenType(),
        hasStream = $entityType.hasStream(),
        isAbstract = $entityType.isAbstract(),
        baseType = "#if($entityType.getBaseType())$entityType.getBaseType()#end",
        fcSourcePath = "#if($fcprops.containsKey("fcSourcePath"))$fcprops.get("fcSourcePath")#end",
        fcTargetPath = "#if($fcprops.containsKey("fcTargetPath"))$fcprops.get("fcTargetPath")#end",
        fcContentKind = #if($fcprops.containsKey("fcContentKind"))EdmContentKind.$fcprops.get("fcContentKind")#{else}EdmContentKind.text#end,
        fcNSPrefix = "#if($fcprops.containsKey("fcNSPrefix"))$fcprops.get("fcNSPrefix")#end",
        fcNSURI = "#if($fcprops.containsKey("fcNSURI"))$fcprops.get("fcNSURI")#end",
        fcKeepInContent = #if($fcprops.containsKey("fcKeepInContent"))$fcprops.get("fcKeepInContent")#{else}false#end)#*
public class $utility.capitalize($entityType.Name) extends AbstractType {
*#
#set($baseTypeName = ${schemaName})
public interface $utility.capitalize($entityType.Name) extends #if( $baseType )$baseType#{else}Serializable#end {

#set ( $keys = [] )
#foreach ($key in $entityType.Key.PropertyRef)
    #if(!$keys.add($key.Name)) #stop #end
#end

#foreach ($property in $entityType.Properties)
    #set ($fcprops = $utility.getFcProperties($property) )
    #if ($keys.contains($property.Name))@Key#end

    @Property(name = "$property.Name", 
                type = "$property.Type", 
                nullable = $property.Nullable,
                defaultValue = "#if($property.getDefaultValue())$property.getDefaultValue()#end",
                maxLenght = #if($property.getMaxLength() && !$property.getMaxLength().equalsIgnoreCase("max"))$property.getMaxLength()#{else}Integer.MAX_VALUE#end,
                fixedLenght = #if($property.isFixedLength())$property.isFixedLength()#{else}false#end,
                precision = #if($property.getPrecision())$property.getPrecision()#{else}0#end,
                scale = #if($property.getScale())$property.getScale()#{else}0#end,
                unicode = #if($property.isUnicode())$property.isUnicode()#{else}false#end,
                collation = "#if($property.getCollation())$property.getCollation()#end",
                srid = "#if($property.getSRID())$property.getSRID()#end",
                concurrencyMode = #if($property.getConcurrencyMode())ConcurrencyMode.$property.getConcurrencyMode()#{else}ConcurrencyMode.NONE#end,
                mimeType = "#if($fcprops.containsKey("mimeType"))$fcprops.get("mimeType")#end",
                fcSourcePath = "#if($fcprops.containsKey("fcSourcePath"))$fcprops.get("fcSourcePath")#end",
                fcTargetPath = "#if($fcprops.containsKey("fcTargetPath"))$fcprops.get("fcTargetPath")#end",
                fcContentKind = #if($fcprops.containsKey("fcContentKind"))EdmContentKind.$fcprops.get("fcContentKind")#{else}EdmContentKind.text#end,
                fcNSPrefix = "#if($fcprops.containsKey("fcNSPrefix"))$fcprops.get("fcNSPrefix")#end",
                fcNSURI = "#if($fcprops.containsKey("fcNSURI"))$fcprops.get("fcNSURI")#end",
                fcKeepInContent = #if($fcprops.containsKey("fcKeepInContent"))$fcprops.get("fcKeepInContent")#{else}false#end)
    public $utility.getJavaType($property.Type) get$utility.capitalize($property.Name)();

    public void set$utility.capitalize($property.Name)(final $utility.getJavaType($property.Type) _$utility.uncapitalize($property.Name));

#end
    
#foreach ($property in $entityType.NavigationProperties)
    #set ( $toRoleType = $utility.getNavigationRoleType($property.Relationship, $property.ToRole) )

    @NavigationProperty(name = "$property.Name", 
                relationship = "$property.Relationship", 
                fromRole = "$property.FromRole", 
                toRole = "$property.ToRole",
                containsTarget = #if($property.isContainsTarget())$property.isContainsTarget()#{else}false#end,
                onDelete = Action.$toRoleType.getValue())
    public $utility.getJavaType($toRoleType.getKey()) get$utility.capitalize($property.Name)();

    public void set$utility.capitalize($property.Name)(final $utility.getJavaType($toRoleType.getKey()) _$utility.uncapitalize($property.Name));

#end
}
