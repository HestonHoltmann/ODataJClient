## Copyright 2013 MS OpenTech.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##      http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
package $basePackage.$schemaName;

import com.msopentech.odatajclient.proxy.api.AbstractEntitySet;
import com.msopentech.odatajclient.proxy.api.annotations.EntitySet;
import com.msopentech.odatajclient.proxy.api.annotations.CompoundKey;
import com.msopentech.odatajclient.proxy.api.annotations.CompoundKeyElement;
import $basePackage.${schemaName}.types.*;

// EdmSimpleType property imports
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.Geospatial;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.GeospatialCollection;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.LineString;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.MultiLineString;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.MultiPoint;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.MultiPolygon;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.Point;
import com.msopentech.odatajclient.engine.data.metadata.edm.geospatial.Polygon;
import java.math.BigDecimal;
import java.net.URI;
import java.sql.Timestamp;
import java.util.UUID;
import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;

#set( $keys = $utility.getEntityKeyType($entitySet) )
#if ( $keys.size() > 1 )
  #set( $type = $utility.getEntityType($entitySet).Name + "Key" )
import java.io.Serializable;
import $basePackage.$schemaName.$entitySet.Name.$type;
#elseif ( $keys.size() == 1 )
  #set ( $type = $keys.values().iterator().next() )
#else
  #set ( $type = "" )
#end

@EntitySet("$entitySet.Name")
public interface $utility.capitalize($entitySet.Name) extends AbstractEntitySet<$utility.getJavaType($entitySet.EntityType), $type> {
#set ( $count = 0 )
#if ( $keys.size() > 1 )
    
    @CompoundKey
    public static class $type implements Serializable {
    #foreach ($entry in $keys.entrySet())

        private $entry.getValue() _$utility.uncapitalize($entry.getKey());

        @CompoundKeyElement(name = "$entry.getKey()", position = $count)
        public $entry.getValue() get$utility.capitalize($entry.getKey())() {
            return _$utility.uncapitalize($entry.getKey());
        }

        public void set$utility.capitalize($entry.getKey())(final $entry.getValue() _$utility.uncapitalize($entry.getKey())) {
            this._$utility.uncapitalize($entry.getKey()) = _$utility.uncapitalize($entry.getKey());
        }#*
        *##set ( $count = $count + 1 )

    #end}
#end
}
